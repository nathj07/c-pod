#!/usr/bin/env ruby
#
# Update a local copy of the main repo
#
require 'json'
require 'optparse'
require 'ostruct'
require 'uri'

$data = File.absolute_path('../../cpoddata', File.dirname(__FILE__))

$types = [:downloads, :rpms, :gems, :osmirror, :conf, :all, :nomirror]

$opts = OpenStruct.new(
             cpod: (ENV['CPOD_URL'] || 'http://cpod.local'), user: 'c-pod',
             delete: false, rbase: nil, dry: false, type: :rpms
        )

if Process.euid == 0
    puts "Hey - don't run this as root"
    exit 2
end

OptionParser.new do |o|
    o.banner = "usage: #{o.program_name} [options]"
    o.separator "Update local Gems, RPMs and downloads from a remote C-Pod. Options:"

    o.on_tail( '-?', '--help', 'Display this screen' ) do
        STDERR.puts o
        exit
    end
    o.on('-b', '--base BASEDIR', String, "Path to remote C-Pod data directory (Default is to query remote server)") do |b|
	$opts.rbase = b
    end
    o.on('-c', '--cpod URL', String, "The C-Pod URL to use (default: #{$opts.cpod})") do |m|
	$opts.cpod = m
    end
    o.on('-d', '--[no-]delete', "Delete local items not present on remote (default: #{$opts.delete})") do |d|
	$opts.delete = d
    end
    o.on('-n', '--[no-]dry', "Dry run (default: #{$opts.dry})") do |t|
        $opts.dry = t
    end
    o.on('-t', '--type TYPE', $types, "Type: #{$types.join(', ')} (default: #{$opts.type})") do |t|
        $opts.type = t.to_sym
    end
    o.on('-u', '--user USER', String, "Remote user (default: #{$opts.user})") do |u|
	$opts.user = u
    end
    begin
        o.parse!
        $opts.uri = URI($opts.cpod)
        raise "Invalid URL #{$opts.cpod}" unless $opts.uri.scheme =~ /http/
        raise "You don't need arguments!" if ARGV.size > 0
        raise "Specifying a remote user requires remote base" if $opts.user != 'c-pod' and $opts.rbase == ''
        raise "Data directory '#{$data}' not found!" unless Dir.exist? $data
        unless $opts.rbase
            require 'open-uri'
            config = JSON.parse(open("#{$opts.cpod}/cpod.json",&:read))
            puts "#{config.inspect}"
            $opts.rbase = config['datadir']
            $opts.rbase += "/" unless $opts.rbase.end_with? '/'
        end
    rescue
        STDERR.puts "Error: #{$!} at #{$!.backtrace[0..3]}"
        STDERR.puts o
        exit 1
    end
end

def transfer msg, obj
    options = ["-rltDOvz"]
    options << "--delete" if $opts.delete
    options << "--dry-run" if $opts.dry
    puts "Updating #{msg}..."
    cmd = "rsync #{options.join(' ')} --progress #{$opts.user}@#{$opts.uri.hostname}:#{$opts.rbase}#{obj} #{$data}/"
    puts cmd
    system cmd
    puts ($? != 0) ? "Failed": "Done"
end

transfer "OS Mirrors", "osmirror" if [:osmirror, :all].include? $opts.type
transfer "Downloads packages", "downloads" if [:downloads, :nomirror, :all].include? $opts.type
transfer "RPM packages", "yum_repos" if [:rpms, :nomirror, :all].include? $opts.type
transfer "GEM packages", "gem_repo" if [:gems, :nomirror, :all].include? $opts.type
transfer "Custom PAC file", "cpod.pac" if [:conf, :nomirror, :all].include? $opts.type
transfer "Custom Netmask file", "netmask_table" if [:conf, :nomirror, :all].include? $opts.type

# vim: set sts=4 sw=4 ts=8:
