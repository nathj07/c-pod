#!/usr/bin/env ruby
#
require 'optparse'
require 'ostruct'
require 'socket'
require 'uri'

def info msg
    print "\033[32m#{msg}\033[0m"
end

types = [:centos5, :centos6, :centos7, :ubuntu14, :win7]

opts = OpenStruct.new(
    type: :centos6,
    bridge: 'br0',
    isopath: '/data/downloads',
    vcpus: 2,
    ram: 2,
    disk: 20,
    repo_url: ENV['CPOD_URL'] || "http://#{Socket.gethostname}",
    vg: 'vg00',
    force: nil,
    verbose: false
)


OptionParser.new do |o|
    o.banner = "Usage: mk_kvm [options] name"
    o.separator ""
    o.separator "Make a KVM virtual machine"
    o.separator "Options:"

    o.on( '-?', '--help', 'Display this screen' ) do
        puts o
        exit
    end
    o.on('-t', '--type TYPE', types, "OS type: #{types.join(', ')} (default: #{opts.type})") do |t|
        opts.type = t
    end
    o.on('-r', '--ram GB', Integer, "Size of RAM in GB (default #{opts.ram})") do |n|
        opts.ram = n
    end
    o.on('-c', '--vcpus N', Integer, "Number of CPUs (default #{opts.vcpus})") do |n|
        opts.vcpus = n
    end
    o.on('-d', '--disk GB', Integer, "Size of disk in GB (default #{opts.disk})") do |n|
        opts.disk = n
    end
    o.on('--cpod CPOD', "C-POD Server URL (default #{opts.repo_url})") do |n|
        opts.repo_url = n
    end
    o.on('--vg VOLUMEGROUP', "LVM volume group (default #{opts.vg})") do |n|
        opts.vg = n
    end
    o.on('--bridge BRIDGE', "Bridge device for networking (default #{opts.bridge})", "(Only used if name is an FQDN else the default network is used)") do |n|
        opts.bridge = n
    end
    o.on('-v', '--verbose', "Enable console during build (default #{opts.verbose})") do |v|
        opts.verbose = true
    end
    o.on('-f', '--force', "Delete if already exists") do
        opts.force = true
    end
    o.parse! rescue (puts "Error: #{$!}"; puts o; exit)
    if ARGV.size == 0
	puts o.help
	exit 2
    end
    `vgdisplay #{opts.vg}`
    unless $? == 0
	puts "Volume Group #{opts.vg} doesn't exist!"
	puts o.help
	exit 2
    end
    opts.repo_url = URI(opts.repo_url)
end

if opts.repo_url.hostname.end_with? '.local' # Convert to IP address
    name = opts.repo_url.hostname
    if z = Socket.gethostbyname(name) rescue nil
        z.shift 3
        z.each do |a|
            name = a.unpack('CCCC').join('.') if a.size == 4
        end
    end
    if name != opts.repo_url.hostname
        opts.repo_url.hostname = name
    else
        puts "Can't find address for host #{name}"
        exit
    end
end

data = File.absolute_path('../../cpoddata', File.dirname(__FILE__))

ARGV.each do |fqdn|
  unless fqdn.index '.'
    fqdn += '.local'
    info "Adding the .local suffix to #{fqdn}\n"
  end
  name = fqdn.partition('.')[0]
  status = `virsh domstate #{name} 2>/dev/null`.strip
  if $? == 0
     if  opts.force
	`virsh destroy #{name}` if status == "running"
	`virsh undefine #{name}`
	info "Machine '#{name}' has been undefined\n"
      else
	info "Machine '#{name}' exists and -f not specified, exiting...\n"
	exit 2
      end
  end
  info "Creating Logical Volume...\n"
  lvsize = `lvs --units g -o lv_size --noheadings #{opts.vg}/#{name}`.strip
  if $? == 0
    if opts.force
      info "Reusing existing logical volume #{name} (size #{lvsize})\n"
    else
      info "The logical volume #{name} exists (size #{lvsize}) and -f not specified, exiting...\n"
      exit 2
    end
  else
    system "lvcreate --name #{name} -L #{opts.disk}G #{opts.vg}"
  end
  install_options = []
  install_options << "--autostart"
  install_options << ((fqdn =~ /\.local$/) ? "--network network=default" : "--network bridge:#{opts.bridge}")
  case opts.type
  when :centos5
    variant = 'rhel5.4'
    install_options << "--location #{opts.repo_url}/osmirror/centos/5/os/x86_64"
  when :centos6
    variant = 'rhel6'
    install_options << "--location #{opts.repo_url}/osmirror/centos/6/os/x86_64"
  when :centos7
    variant = 'rhel7'
    install_options << "--location #{opts.repo_url}/osmirror/centos/7/os/x86_64"
  when :ubuntu14
    variant = 'generic'
    install_options << "iso = #{data}/osmirror/ubuntu/14/isos/ubuntu-14.04-server-amd64.iso"
    install_options << "--location #{opts.repo_url}/osmirror/ubuntu/14/isos/boot1404.iso"
  when :win7
    variant = 'win7'
    `install -m 0775 -d #{opts.isopath}`
    `curl -o #{opts.isopath}/win7.iso -z #{opts.isopath}/win7.iso #{opts.repo_url}/downloads/win7.iso`
    install_options << "--cdrom #{opts.isopath}/win7.iso"
  end

  case opts.type
  when /^centos/
    install_options << '--os-type=linux'
    install_options << '--graphics none'
    install_options << "--noautoconsole" unless opts.verbose
    install_options << %{--extra-args="ks=#{opts.repo_url}/ks/#{opts.type}-kvm.ks?host=#{fqdn} console=tty0 console=ttyS0,115200"}
  when /^ubuntu/
    install_options << '--os-type=linux'
    install_options << '--graphics none'
    install_options << "--noautoconsole" unless opts.verbose
    install_options << %{--extra_args="auto=true hostname=#{fqdn} priority=critical url=#{opts.repo_url}/ks/./#{opts.type}.seed?host=#{fqdn}"}
  when /^win/
    install_options << '--os-type=windows'
    install_options << "--noautoconsole"
    install_options << "--wait=0"
    install_options << '--graphics vnc,listen=0.0.0.0,password=secret'
    # These drivers don't seem to be necessary with libvirt 0.10.2 using QEMU hypervisor 0.12.1
    # `curl -o #{opts.isopath}/virtio-win.iso -z #{opts.isopath}/virtio-win.iso #{opts.repo_url}/downloads/virtio-win.iso`
    # install_options << "--disk path=#{opts.isopath}/virtio-win.iso,device=cdrom"
  end

  mkvm = <<-MKVM.gsub(/\s+/,' ')
    virt-install --name #{name}
    --disk path=/dev/#{opts.vg}/#{name}
    --vcpus=#{opts.vcpus}
    --ram=#{(opts.ram*1024).to_s}
    #{install_options.join(' ')}
    --os-variant=#{variant}
  MKVM
  info "Building VM...\n"
  puts "Command:\n#{mkvm}"
  system mkvm

  case opts.type
  when /^win/
      port = `virsh vncdisplay #{name} 2>/dev/null`.strip.slice(1..-1).to_i + 5900
      puts "#{name} now booting, use command 'open vnc://#{`hostname`.strip}:#{port}' on your Mac"
  end

end

# vim: ft=ruby sts=2 sw=2 ts=8
