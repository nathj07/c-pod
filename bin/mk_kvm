#!/usr/bin/env ruby
#
require 'optparse'
require 'ostruct'
require 'socket'

def info msg
    print "\033[32m#{msg}\033[0m"
end

types = [:centos5, :centos6, :ubuntu14]

opts = OpenStruct.new(
    type: :centos6,
    vcpus: 2,
    ram: 2,
    disk: 20,
    repo: Socket.ip_address_list.detect{|intf| intf.ipv4_private?}.ip_address,
    vg: 'vg00',
    force: nil,
    verbose: false
)


OptionParser.new do |o|
    o.banner = "Usage: mk_kvm [options] name"
    o.separator ""
    o.separator "Make a KVM virtual machine"
    o.separator "Options:"

    o.on( '-?', '--help', 'Display this screen' ) do
        puts o
        exit
    end
    o.on('-t', '--type TYPE', types, "OS type: #{types.join(', ')} (default: #{opts.type})") do |t|
        opts.type = t
    end
    o.on('-r', '--ram GB', Integer, "Size of RAM in GB (default #{opts.ram})") do |n|
        opts.ram = n
    end
    o.on('-c', '--vcpus N', Integer, "Number of CPUs (default #{opts.vcpus})") do |n|
        opts.vcpus = n
    end
    o.on('-d', '--disk GB', Integer, "Size of disk in GB (default #{opts.disk})") do |n|
        opts.disk = n
    end
    o.on('-s', '--server HOST', "Name of the repo server (default #{opts.repo})") do |n|
        opts.repo = n
    end
    o.on('--vg VOLUMEGROUP', "LVM volume group (default #{opts.vg})") do |n|
        opts.vg = n
    end
    o.on('-v', '--verbose', "Enable console during build (default #{opts.verbose})") do |v|
        opts.verbose = true
    end
    o.on('-f', '--force', "Delete if already exists") do
        opts.force = true
    end
    o.parse! rescue (puts "Error: #{$!}"; puts o; exit)
    if ARGV.size == 0
	puts o.help
	exit 2
    end
    `vgdisplay #{opts.vg}`
    unless $? == 0
	puts "Volume Group #{opts.vg} doesn't exist!"
	puts o.help
	exit 2
    end
end

base = File.absolute_path('../..', File.dirname(__FILE__))

ARGV.each do |name|
  if /^(?<sname>\w+)\.local$/ =~ name
    name = sname
    info "Dropping the .local suffix on #{name} - not required\n"
  end
  status = `virsh domstate #{name}`.strip
  if $? == 0 and status != "shut off"
    if opts.force
      `virsh destroy #{name}`
      `virsh undefine #{name}`
      info "The machine #{name} has been shut down and undefined\n"
    else
      info "The machine #{name} exists and -f not specified, exiting...\n"
      exit 2
    end
  end
  info "Creating Logical Volume...\n"
  lvsize = `lvs --units g -o lv_size --noheadings #{opts.vg}/#{name}`.strip
  if $? == 0
    if opts.force
      info "Reusing existing logical volume #{name} (size #{lvsize})\n"
    else
      info "The logical volume #{name} exists (size #{lvsize}) and -f not specified, exiting...\n"
      exit 2
    end
  else
    system "lvcreate --name #{name} -L #{opts.disk}G #{opts.vg}"
  end
  install_options = []
  install_options << "--autostart"
  install_options << "--noautoconsole" unless opts.verbose
  case opts.type
  when :centos5, :centos6
    extra_args = "ks=http://#{opts.repo}/ks/#{opts.type}-kvm.ks?host=#{name}.local"
  when :ubuntu14
    extra_args="auto=true priority=critical url=http://#{opts.repo}/ks/#{opts.type}.seed?host=#{name}.local"
  end
  mkvm = <<-MKVM.gsub(/\s+/,' ')
    virt-install --name #{name}
    --disk path=/dev/#{opts.vg}/#{name}
    --vcpus=#{opts.vcpus}
    --ram=#{(opts.ram*1024).to_s}
    --graphics none
    #{install_options.join(' ')}
    --network network=default
    --location http://#{opts.repo}/osdisks/#{opts.type}
    --extra-args="#{extra_args} console=tty0 console=ttyS0,115200"
    --os-type=linux
  MKVM
  info "Building VM...\n"
  puts "Command:\n#{mkvm}"
  system mkvm
end

# vim: sts=2 sw=2 ts=8
