#!/usr/bin/env ruby
#
require 'optparse'
require 'ostruct'
require 'open-uri'
require 'uri'

sourcedir = `rpm --eval='%_sourcedir' 2>/dev/null`.strip
if $? != 0
    sourcedir = "."
end

opts = OpenStruct.new( :sourcedir => sourcedir )

OptionParser.new do |o|
    o.banner = "Usage: downloadRPMsource specfile ..."
    o.separator ""
    o.separator "Read the RPM .spec file and download the sources"

    o.on( '-o', '--output SOURCEDIR', "SOURCE directory (default #{opts.sourcedir})" ) do |d|
	puts o unless File.is_dir? d
	opts.sourcedir = d
    end
    o.on( '-?', '--help', 'Display this screen' ) do
        puts o
        exit
    end
    o.parse! rescue (puts "Error: #{$!}"; puts o; exit)
    if ARGV.size == 0
	puts o.help
	exit 2
    end
end

ARGV.each do |specfile|
    unless File.exist? specfile
	puts "Specfile #{specfile} not found"
	next
    end
    macros = {}
    sources = []
    File.foreach(specfile) do |line|
	next if /^\s*#/ =~ line

	if /^%define\s+(?<macro>\w+)\s+(?<value>.*)/ =~ line
	    macros[macro] = value
	    next
	end
	if /^Name:\s*(?<name>.*)$/ =~ line
	    macros['name'] = name.gsub(/%{(\w+)}/) do |m|
		macros[m.slice(2..-2)]
	    end
	    next
	end
	if /^Version:\s*(?<version>.*)$/ =~ line
	    macros['version'] = version.gsub(/%{(\w+)}/) do |m|
		macros[m.slice(2..-2)]
	    end
	    next
	end
	if /^Release:\s*(?<release>.*)$/ =~ line
	    macros['release'] = release.gsub(/%{(\w+)}/) do |m|
		macros[m.slice(2..-2)]
	    end
	    next
	end
	if /^Source(?<num>[0-9]*):\s*(?<srcurl>.*)$/ =~ line
	    sources << srcurl
	    next
	end
    end
    sources.each do |source|
	source.gsub!(/%{(\w+)}/) do |m|
	    macros[m.slice(2..-2)]
	end
        puts "Source: #{source}"
	uri = URI.parse(source)
        next unless uri.scheme =~ /^(https?|ftp)$/
        filename = File.basename(uri.path)
        open(source,"r") do |input|
            size = input.meta['content-length'].to_i
            # GitHub archive URL's don't have the filename as the basename
            # This means the spec file has to be tweaked
            if /filename=(\S+)/ =~ input.meta['content-disposition']
                filename = $1
            end
            len = 0
            print "     Downloading #{filename}..."
            File.open("#{opts.sourcedir}/#{filename}","w") do |output|
                while data = input.read(10240)
                    if size > 0
                        len += data.size
                        per = len*100/size
                        print "\r#{per}%"
                        $stdout.flush
                    end
                    output.write(data)
                end
            end
            puts ""
        end
    end
end

# vim: ts=8 sw=4 sts=4:
