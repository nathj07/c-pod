#!/usr/bin/env ruby
#
# Push a package to the YUM repo
# The server-side CGI rebuilds the yum indices
#
require 'fileutils'
require 'optparse'
require 'ostruct'
require 'socket'
require 'uri'
require_relative 'funcs'

def info msg
    print "\033[32m#{msg}\033[0m"
end

types = [:stable, :unstable, :lifted]

opts = OpenStruct.new(type: :unstable, debug: false, 
                      force: nil, keep: 3, rhel: nil, 
                      repo: ENV['CPOD_URL'] || 'http://cpod.local')

OptionParser.new do |o|
    o.banner = "usage: #{o.program_name} [options] pkg ..."
    o.separator "Push RPM and GEM packages to C-Pod server and rebuild indices. Options:"

    o.on_tail( '-?', '--help', 'Display this screen' ) do
        STDERR.puts o
        exit
    end
    o.on('-d', '--debug', "Debug") do
        opts.debug = true
    end
    o.on('-t', '--type TYPE', types, "Type: #{types.join(', ')} (default: #{opts.type})") do |t|
        opts.type = t
    end
    o.on('-r', '--repo HOST', "The C-Pod server (default #{opts.repo})") do |n|
        opts.repo = n
    end
    o.on('-c', '--centos VERSION', [:'5',:'6',:'7'], "Force CentOS version 5,6,7 (default is auto-detect)") do |v|
        opts.rhel = v.to_s
    end
    o.on('-f', '--force', "Force complete metadata rebuild") do
        opts.force = true
    end
    o.on('-k', '--keep N', Integer, "Keep N releases (default #{opts.keep}, -1 to keep all, 0 to remove all)") do |k|
        opts.keep = k
    end
    o.parse! rescue (STDERR.puts "Error: #{$!}"; STDERR.puts o; exit)
    if ARGV.size == 0 and not opts.force
        STDERR.puts o
        exit
    end
end

if opts.repo.end_with? '.local' # Convert to IP address as Curl doesn't do mDNS
    repo_uri = URI(opts.repo)
    repohost = repo_uri.host
    opts.repo = nil
    z = Socket.gethostbyname(repohost) rescue nil
    if z
        z.shift 3
        z.each do |a|
            opts.repo = a.unpack('CCCC').join('.') if a.size == 4
        end
    end
    unless opts.repo
        puts "Can't find address for host #{repohost}"
        exit
    end
    repo_uri.host = opts.repo
    opts.repo = repo_uri.to_s
end

curlopts = ["-F type=#{opts.type}"]
curlopts.push "-F debug=yes" if opts.debug
curlopts.push "-F force=yes" if opts.force
curlopts.push "-F rhel=#{opts.rhel}" if opts.rhel
curlopts.push("-F keep=#{opts.keep}")

info "Using C-Pod #{opts.repo}\n"
files = ARGV.select { |f| File.exist?(f) ? true: ( puts "File #{f} not found"; false ) }
files.each do |f|
    begin
        parsepkg(File.basename(f), opts.rhel)
        info "Uploading #{f}\n"
        cmd = "curl -f -# -w '%{http_code}' #{curlopts.join(' ')} -F pkgfile=@#{f} #{opts.repo}/bin/rx_pkg.cgi"
        puts `#{cmd}`
    rescue
        puts "#{$!}, skipping...\n"
    end
end

info "Rebuilding Indices\n"
curlopts.push("-F rebuild=yes")
system("curl -f --silent #{curlopts.join(' ')} #{opts.repo}/bin/rx_pkg.cgi")

# vim: ft=ruby sts=4 sw=4 ts=8
