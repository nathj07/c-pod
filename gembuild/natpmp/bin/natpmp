#!/usr/bin/env ruby
#
require 'natpmp'
require 'natpmp/version'
require 'ostruct'
require 'optparse'

types = [:tcp, :udp]

opts = OpenStruct.new(port: nil, type: :tcp, verbose: false, public: 0, ttl: 7200)

OptionParser.new do |o|
    o.banner = "usage: #{o.program_name} [options] [command]"
    o.separator "Open a port on a NAT-PMP gateway. Options:"

    o.on_tail( '-?', '--help', 'Display this screen' ) do
        puts o
        exit
    end
    o.on('-t', '--type TYPE', types, "Type: #{types.join(', ')} (default: #{opts.type})") do |t|
        opts.type = t
    end
    o.on('-p', '--port PORT', Integer, "Private port (default: auto)") do |n|
        opts.port = n
    end
    o.on('--ttl TIME', Integer, "TTL if no command (default #{opts.ttl} sec)") do |n|
        opts.ttl = n
    end
    o.on('-P', '--public PUBPORT', Integer, "External port (default: auto)") do |n|
        opts.public = n
    end
    o.on('-v', '--verbose', "Verbose") do
        opts.verbose = true
    end
    o.on('--version', "Version") do
        STDERR.puts "#{o.program_name}: Version #{NATPMP::VERSION}"
        exit;
    end
    o.separator "In the command string the following substitutions will be made:"
    o.separator "  %p the local port"
    o.separator "  %h the local IP address"
    o.separator "  %P the gateway port"
    o.separator "  %H the gateway IP address"
    o.separator "(Use %% to avoid this)"
    o.separator "The mapping will be closed on completion of the command"
    o.parse! rescue (STDERR.puts "#{o.program_name}: #{$!}\n#{o.to_s}"; exit)
end

NATPMP.verbose opts.verbose

unless opts.port
  require 'socket'
  p = Addrinfo.send(opts.type, "0.0.0.0", 0).bind
  opts.localhost, opts.port = p.local_address.ip_unpack
  STDERR.puts "Local port: #{opts.port}" if opts.verbose
end

if opts.verbose
  begin
    STDERR.puts "Gateway: #{NATPMP.GW}"
    STDERR.puts "External IP: #{NATPMP.addr}"
  rescue
    STDERR.puts "#{opts.programname}: Error #{$!}"
  end
end

if ARGV.size > 0
  command = ARGV.join(' ')
  NATPMP.map opts.port, opts.public, nil, opts.type do |map|
    command.gsub! /(?<!%)%p/, map.priv.to_s
    command.gsub! /(?<!%)%h/, opts.localhost.to_s
    command.gsub! /(?<!%)%P/, map.mapped.to_s
    command.gsub! /(?<!%)%H/, NATPMP.addr
    command.gsub! /%%([hpHP])/,'%\\1' 
    STDERR.puts "Executing: #{command}" if opts.verbose
    system command
  end
else
  map = NATPMP.map opts.port, opts.public, opts.ttl, opts.type
end

# vim: ft=ruby sts=2 sw=2 ts=8
